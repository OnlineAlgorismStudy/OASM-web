{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["database","firebase","useState","users","setUsers","complates","setComplates","notComplates","setNotComplates","useEffect","ref","once","data","toJSON","_","isEmpty","result","Object","keys","val","forEach","key","file","date","match","moment","format","concat","user","name","notResults","includes","Container","Row","Col","md","Card","style","textAlign","Body","Title","length","map","notComplate","Text","complate","Boolean","window","location","hostname","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+RASe,G,MAAA,WACb,IAAMA,EAAWC,aADE,EAGOC,mBAAS,IAHhB,mBAGZC,EAHY,KAGLC,EAHK,OAIeF,mBAAS,IAJxB,mBAIZG,EAJY,KAIDC,EAJC,OAKqBJ,mBAAS,IAL9B,mBAKZK,EALY,KAKEC,EALF,KAkCnB,OA3BAC,qBAAU,WACRT,EAASU,IAAI,SAASC,KAAK,SAAS,SAACC,GAAD,OAAUR,EAASQ,EAAKC,eAC3D,CAACb,IAEJS,qBAAU,WACHK,IAAEC,QAAQZ,IACbH,EAASU,IAAI,SAASC,KAAK,SAAS,SAACC,GACnC,IAAII,EAAS,GACbC,OAAOC,KAAKN,EAAKO,OAAOC,SAAQ,SAACC,GAC/B,IAAMC,EAAOV,EAAKO,MAAME,GACpBC,EAAKC,KAAKC,MAAMC,MAASC,OAAO,iBAClCV,EAASA,EAAOW,OAAOxB,EAAMmB,EAAKM,MAAMC,UAI5C,IAAIC,EAAa,GACjBb,OAAOC,KAAKf,GAAOiB,SAAQ,SAACC,GACrBL,EAAOe,SAAS5B,EAAMkB,GAAKQ,QAC9BC,EAAaA,EAAWH,OAAOxB,EAAMkB,GAAKQ,UAG9CvB,EAAaU,GACbR,EAAgBsB,QAGnB,CAAC9B,EAAUG,IAGZ,kBAAC6B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAAEC,UAAW,WACxB,kBAACF,EAAA,EAAKG,KAAN,KACE,kBAACH,EAAA,EAAKI,MAAN,KACGf,MAASC,OAAO,cADnB,uBACuCnB,EAAakC,QAEnDlC,EAAamC,KAAI,SAACC,GAAD,OAChB,kBAACP,EAAA,EAAKQ,KAAN,KAAYD,SAKpB,kBAACT,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAAEC,UAAW,WACxB,kBAACF,EAAA,EAAKG,KAAN,KACE,kBAACH,EAAA,EAAKI,MAAN,KACGf,MAASC,OAAO,cADnB,iBACsCrB,EAAUoC,QAE/CpC,EAAUqC,KAAI,SAACG,GAAD,OACb,kBAACT,EAAA,EAAKQ,KAAN,KAAYC,aCrDRC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASzB,MACvB,2DCENvB,gBAZuB,CACrBiD,OAAQ,0CACRC,WAAY,6BACZC,YAAa,oCACbC,UAAW,aACXC,cAAe,yBACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAMjBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAD,OAEFC,SAASC,eAAe,SDyGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1c1f0fb1.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Container, Row, Col, Card } from \"react-bootstrap\";\nimport _ from \"lodash\";\nimport moment from \"moment\";\nimport * as firebase from \"firebase/app\";\n\n// Add the Firebase services that you want to use\nimport \"firebase/database\";\n\nexport default () => {\n  const database = firebase.database();\n\n  const [users, setUsers] = useState([]);\n  const [complates, setComplates] = useState([]);\n  const [notComplates, setNotComplates] = useState([]);\n\n  useEffect(() => {\n    database.ref(\"users\").once(\"value\", (data) => setUsers(data.toJSON()));\n  }, [database]);\n\n  useEffect(() => {\n    if (!_.isEmpty(users)) {\n      database.ref(\"files\").once(\"value\", (data) => {\n        let result = [];\n        Object.keys(data.val()).forEach((key) => {\n          const file = data.val()[key];\n          if (file.date.match(moment().format(\"YYYY-MM-DD\"))) {\n            result = result.concat(users[file.user].name);\n          }\n        });\n\n        let notResults = [];\n        Object.keys(users).forEach((key) => {\n          if (!result.includes(users[key].name)) {\n            notResults = notResults.concat(users[key].name);\n          }\n        });\n        setComplates(result);\n        setNotComplates(notResults);\n      });\n    }\n  }, [database, users]);\n\n  return (\n    <Container>\n      <Row>\n        <Col md={6}>\n          <Card style={{ textAlign: \"center\" }}>\n            <Card.Body>\n              <Card.Title>\n                {moment().format(\"YYYY-MM-DD\")} 미달성 {notComplates.length}\n              </Card.Title>\n              {notComplates.map((notComplate) => (\n                <Card.Text>{notComplate}</Card.Text>\n              ))}\n            </Card.Body>\n          </Card>\n        </Col>\n        <Col md={6}>\n          <Card style={{ textAlign: \"center\" }}>\n            <Card.Body>\n              <Card.Title>\n                {moment().format(\"YYYY-MM-DD\")} 달성 {complates.length}\n              </Card.Title>\n              {complates.map((complate) => (\n                <Card.Text>{complate}</Card.Text>\n              ))}\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport * as firebase from \"firebase/app\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDYHjPAufAjSDR7b09_SfZxrFRN3IPIbX8\",\n  authDomain: \"oasm-889a7.firebaseapp.com\",\n  databaseURL: \"https://oasm-889a7.firebaseio.com\",\n  projectId: \"oasm-889a7\",\n  storageBucket: \"oasm-889a7.appspot.com\",\n  messagingSenderId: \"187405855435\",\n  appId: \"1:187405855435:web:318d1ae149f82e8743094e\",\n  measurementId: \"G-659EFPREVS\",\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}