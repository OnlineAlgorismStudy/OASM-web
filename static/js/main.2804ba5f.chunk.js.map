{"version":3,"sources":["utils/redux.js","redux/modules/user.js","redux/modules/file.js","pages/Home.js","redux/modules/index.js","utils/saga.js","utils/firebase.js","saga/user.js","saga/file.js","saga/index.js","redux/Store.js","App.js","serviceWorker.js","index.js"],"names":["init","status","data","error","baseAsyncActionHandler","name","actionTypes","request","state","produce","draft","success","action","payload","failure","response","baseApiActionType","createEntity","entity","type","initialState","users","userAction","createAction","userActions","userEntity","handleActions","files","fileAction","fileActions","fileEntity","dispatch","useDispatch","useSelector","store","user","file","useState","complates","setComplates","notComplates","setNotComplates","useEffect","date","moment","format","filter","map","includes","github","Container","Row","Col","md","Card","style","textAlign","Body","Title","length","notComplate","Text","key","complate","combineReducers","fetchEntity","apiFn","put","params","call","console","log","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","watchGetUsers","rootSaga","getUsersSaga","a","database","ref","once","then","result","Object","values","val","take","all","fork","watchGetFiles","getFilesSaga","match","userSaga","fileSaga","sagaMiddleware","createSagaMiddleware","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","middleware","applyMiddleware","createStore","rootReducer","run","Store","Home","Boolean","location","hostname","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.2804ba5f.chunk.js","sourcesContent":["import produce from \"immer\";\n\nexport const ALREADY = \"ALREADY\";\nexport const REQUEST = \"REQUEST\";\nexport const SUCCESS = \"SUCCESS\";\nexport const FAILURE = \"FAILURE\";\n\nexport const init = {\n  status: ALREADY,\n  data: [],\n  error: \"\",\n};\n\nexport const baseAsyncActionHandler = (name, actionTypes) => {\n  return {\n    [actionTypes.request]: (state) => {\n      return produce(state, (draft) => {\n        draft[name].status = REQUEST;\n        draft[name].data = [];\n        draft[name].error = \"\";\n      });\n    },\n    [actionTypes.success]: (state, action) => {\n      return produce(state, (draft) => {\n        draft[name].status = SUCCESS;\n        draft[name].data = action.payload.data;\n      });\n    },\n    [actionTypes.failure]: (state, action) => {\n      return produce(state, (draft) => {\n        draft[name].status = FAILURE;\n        draft[name].error = action.error.response;\n      });\n    },\n  };\n};\n\nexport const baseApiActionType = (name) => {\n  return {\n    request: `${name}_REQUEST`,\n    success: `${name}_SUCCESS`,\n    failure: `${name}_FAILURE`,\n  };\n};\n\nexport const createEntity = (entity) => ({\n  request: () => ({ type: entity.request }),\n  success: (data) => ({ type: entity.success, payload: data }),\n  failure: (error) => ({ type: entity.failure, error: error }),\n});\n","import { createAction, handleActions } from \"redux-actions\";\nimport {\n  baseApiActionType,\n  baseAsyncActionHandler,\n  createEntity,\n  init,\n} from \"utils/redux\";\n\nconst initialState = {\n  users: init,\n};\n\nexport const USER = \"user\";\nexport const userAction = createAction(USER);\nexport const userActions = baseApiActionType(userAction);\nexport const userEntity = createEntity(userActions);\n\nexport default handleActions(\n  {\n    ...baseAsyncActionHandler(\"users\", userActions),\n  },\n  initialState\n);\n","import { createAction, handleActions } from \"redux-actions\";\nimport {\n  baseApiActionType,\n  baseAsyncActionHandler,\n  createEntity,\n  init,\n} from \"utils/redux\";\n\nconst initialState = {\n  files: init,\n};\n\nexport const FILE = \"file\";\nexport const fileAction = createAction(FILE);\nexport const fileActions = baseApiActionType(fileAction);\nexport const fileEntity = createEntity(fileActions);\n\nexport default handleActions(\n  {\n    ...baseAsyncActionHandler(\"files\", fileActions),\n  },\n  initialState\n);\n","import React, { useState, useEffect } from \"react\";\nimport { Container, Row, Col, Card } from \"react-bootstrap\";\nimport moment from \"moment\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { SUCCESS } from \"utils/redux\";\nimport { userAction } from \"redux/modules/user\";\nimport { fileAction } from \"redux/modules/file\";\n\nexport default () => {\n  const dispatch = useDispatch();\n\n  const users = useSelector((store) => store.user.users);\n  const files = useSelector((store) => store.file.files);\n\n  const [complates, setComplates] = useState([]);\n  const [notComplates, setNotComplates] = useState([]);\n\n  useEffect(() => {\n    dispatch(userAction());\n    dispatch(fileAction({ date: moment().format(\"YYYY-MM-DD\") }));\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (files.status === SUCCESS) {\n      setComplates(\n        users.data.filter((user) =>\n          files.data.map((file) => file.user).includes(user.github)\n        )\n      );\n      setNotComplates(\n        users.data.filter(\n          (user) => !files.data.map((file) => file.user).includes(user.github)\n        )\n      );\n    }\n  }, [dispatch, users, files]);\n\n  return (\n    <Container>\n      <Row>\n        <Col md={6}>\n          <Card style={{ textAlign: \"center\" }}>\n            <Card.Body>\n              <Card.Title>\n                {moment().format(\"YYYY-MM-DD\")} 미달성 {notComplates.length}\n              </Card.Title>\n              {notComplates.map((notComplate) => (\n                <Card.Text key={notComplate.github}>\n                  {notComplate.name}\n                </Card.Text>\n              ))}\n            </Card.Body>\n          </Card>\n        </Col>\n        <Col md={6}>\n          <Card style={{ textAlign: \"center\" }}>\n            <Card.Body>\n              <Card.Title>\n                {moment().format(\"YYYY-MM-DD\")} 달성 {complates.length}\n              </Card.Title>\n              {complates.map((complate) => (\n                <Card.Text key={complate.github}>{complate.name}</Card.Text>\n              ))}\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n","import { combineReducers } from \"redux\";\n\nimport user from \"redux/modules/user\";\nimport file from \"redux/modules/file\";\n\nexport default combineReducers({ user, file });\n","import { put, call } from \"redux-saga/effects\";\n\nexport const fetchEntity = (entity, apiFn) =>\n  function* (...params) {\n    yield put(entity.request());\n    try {\n      const data = yield call(apiFn, ...params);\n      yield put(entity.success(data));\n    } catch (error) {\n      console.log(error);\n      yield put(entity.failure(error));\n    }\n  };\n","import * as firebase from \"firebase/app\";\nimport \"firebase/database\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDYHjPAufAjSDR7b09_SfZxrFRN3IPIbX8\",\n  authDomain: \"oasm-889a7.firebaseapp.com\",\n  databaseURL: \"https://oasm-889a7.firebaseio.com\",\n  projectId: \"oasm-889a7\",\n  storageBucket: \"oasm-889a7.appspot.com\",\n  messagingSenderId: \"187405855435\",\n  appId: \"1:187405855435:web:318d1ae149f82e8743094e\",\n  measurementId: \"G-659EFPREVS\",\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;\n","import { call, take, fork, all } from \"redux-saga/effects\";\nimport { USER, userEntity } from \"redux/modules/user\";\nimport { fetchEntity } from \"utils/saga\";\nimport firebase from \"utils/firebase\";\n\nconst getUsers = async () =>\n  await firebase\n    .database()\n    .ref(\"users\")\n    .once(\"value\")\n    .then((result) => ({ data: Object.values(result.val()) }));\n\nconst getUsersSaga = fetchEntity(userEntity, getUsers);\n\nfunction* watchGetUsers() {\n  while (true) {\n    const { payload } = yield take(USER);\n    yield call(getUsersSaga, payload);\n  }\n}\n\nexport default function* rootSaga() {\n  yield all([fork(watchGetUsers)]);\n}\n","import { call, take, fork, all } from \"redux-saga/effects\";\nimport { FILE, fileEntity } from \"redux/modules/file\";\nimport { fetchEntity } from \"utils/saga\";\nimport firebase from \"utils/firebase\";\n\nconst getFiles = async (data) =>\n  await firebase\n    .database()\n    .ref(\"files\")\n    .once(\"value\")\n    .then((result) => ({\n      data: Object.values(result.val()).filter((file) =>\n        file.date.match(data.date)\n      ),\n    }));\n\nconst getFilesSaga = fetchEntity(fileEntity, getFiles);\n\nfunction* watchGetFiles() {\n  while (true) {\n    const { payload } = yield take(FILE);\n    yield call(getFilesSaga, payload);\n  }\n}\n\nexport default function* rootSaga() {\n  yield all([fork(watchGetFiles)]);\n}\n","import { all } from \"redux-saga/effects\";\n\nimport userSaga from \"saga/user\";\nimport fileSaga from \"saga/file\";\n\nexport default function* rootSaga() {\n  yield all([userSaga(), fileSaga()]);\n}\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\n\nimport rootReducer from \"redux/modules\";\nimport rootSaga from \"saga\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\nexport default () => {\n  const composeEnhancers =\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n  const middleware = applyMiddleware(sagaMiddleware);\n\n  const store = createStore(rootReducer, composeEnhancers(middleware));\n  sagaMiddleware.run(rootSaga);\n\n  return store;\n};\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\n\nimport Home from \"pages/Home\";\nimport Store from \"redux/Store\";\n\nconst store = Store();\n\nexport default () => {\n  return (\n    <Provider store={store}>\n      <Home />\n    </Provider>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}